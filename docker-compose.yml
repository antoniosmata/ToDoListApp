services:
  postgres:
    image: postgres:15
    container_name: taskmanager-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: taskmanager-backend
    environment:
      # - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      # - ConnectionStrings__DefaultConnection=Host=postgres;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      # - JwtSettings__SecretKey=${JWT_SECRET_KEY}
      # - JwtSettings__Issuer=${JWT_ISSUER}
      # - JwtSettings__Audience=${JWT_AUDIENCE}
      # - For demo purposes:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=taskmanager;Username=admin;Password=dev_password_123
      - JwtSettings__SecretKey=development_jwt_secret_key_32_characters_minimum_required_for_security
      - JwtSettings__Issuer=TaskManagerAPI
      - JwtSettings__Audience=TaskManagerAPI
    ports:
      - "5001:80"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL}
    container_name: taskmanager-frontend
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy

volumes:
  postgres_data:
